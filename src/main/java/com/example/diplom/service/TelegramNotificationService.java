package com.example.diplom.service;


import com.example.diplom.models.Order;
import com.example.diplom.models.OrderItem;
import com.example.diplom.models.Product;
import com.example.diplom.models.enums.OrderStatus;
import com.example.diplom.repository.OrderRepository;
import com.example.diplom.repository.ProductRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.core.io.FileSystemResource;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestTemplate;


import java.io.File;
import java.util.Optional;

@Service
@RequiredArgsConstructor
public class TelegramNotificationService {

    private final RestTemplate restTemplate;
    private final ProductRepository productRepository;
    private final OrderRepository orderRepository;
    private final OrderCheckService orderCheckService;

    private final String TELEGRAM_BOT_TOKEN = "7637842579:AAEXPLFZM9p-VliUkSsFzRfmE3qmq5jadrw";
    private final String API_URL = "https://api.telegram.org/bot" + TELEGRAM_BOT_TOKEN;


    //–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É
    public void sendOrderNotification(String chatIdSupplier, String chatIdClient,Order order) {
        String message = "üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑! \n" +
                "ID –∑–∞–∫–∞–∑–∞: " + order.getId() + "\n" +
                "–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: " + order.getTotalPrice() + " ‚ÇΩ\n" +
                "–ü—Ä–∏–±—ã–ª—å: " + order.getProfit() + " ‚ÇΩ\n" +
                "–°—Ç–∞—Ç—É—Å: " + order.getStatus() + "\n" +
                "–ê–¥—Ä–µ—Å: –≥." + order.getCity() + ", " + order.getAddress() + "\n\n" +
                "–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ:\n";

        if (order.getOrderItems() != null && !order.getOrderItems().isEmpty()) {
            for (OrderItem item : order.getOrderItems()) {
                message += item.getProduct().getTitle() + " (–ö–æ–ª-–≤–æ: " + item.getQuantity() + ", –¶–µ–Ω–∞: " + item.getProduct().getSellingPrice() + " ‚ÇΩ)\n";
            }
        } else {
            message += "–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.\n";
        }
        message += "–ü—Ä–∏–Ω—è—Ç—å: /accept_" + order.getId() + "\n" +
                "–û—Ç–∫–ª–æ–Ω–∏—Ç—å: /reject_" + order.getId();

        String url = "https://api.telegram.org/bot" + TELEGRAM_BOT_TOKEN + "/sendMessage?chat_id=" + chatIdSupplier + "&text=" + message;
        restTemplate.getForObject(url, String.class);

        String messageClient = "–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫—É –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ";
        String url1 = "https://api.telegram.org/bot" + TELEGRAM_BOT_TOKEN + "/sendMessage?chat_id=" + chatIdClient + "&text=" + messageClient;
        restTemplate.getForObject(url1, String.class);

    }

    //–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ –∫–∞–∫—É—é –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∞–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ
    public void handleOrderResponse(String command) {
        if (command.startsWith("/accept_")) {
            Long orderId = Long.parseLong(command.replace("/accept_", ""));
            acceptOrder(orderId);
        } else if (command.startsWith("/reject_")) {
            Long orderId = Long.parseLong(command.replace("/reject_", ""));
            rejectOrder(orderId);
        } else if (command.startsWith("/shipped_")) {
            Long orderId = Long.parseLong(command.replace("/shipped_", ""));
            shippedOrder(orderId);
        } else if (command.startsWith("/complete_")) {
            Long orderId = Long.parseLong(command.replace("/complete_", ""));
            completeOrder(orderId);
        } else if (command.startsWith("/delivered_")) {
            Long orderId = Long.parseLong(command.replace("/delivered_", ""));
            deliveredOrder(orderId);
        }
    }

    //–ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º
    public void acceptOrder(Long id) {
        Optional<Order> orderOptional = orderRepository.findById(id);

        Order order = orderOptional.get();

        //–£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ
        for (OrderItem item : order.getOrderItems()) {
            Product product = item.getProduct();
            product.setQuantity(product.getQuantity() - item.getQuantity());
            productRepository.save(product);
        }


        order.setStatus(OrderStatus.CONFIRMED);
        orderRepository.save(order);

        String message = "–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∑–∞–∫–∞–∑! \n\n" +
                "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: \n" +
                "–í –ø—É—Ç–∏: /shipped_" + id + "\n" +
                "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑: /reject_" + id;

        String url = "https://api.telegram.org/bot" + TELEGRAM_BOT_TOKEN + "/sendMessage?chat_id=" + order.getSupplier().getChatId() + "&text=" + message;
        restTemplate.getForObject(url, String.class);
        String text = "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ ‚Ññ" + id + " –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º!";
        String url1 = "https://api.telegram.org/bot" + TELEGRAM_BOT_TOKEN + "/sendMessage?chat_id=" + order.getClient().getChatId() + "&text=" + text;
        restTemplate.getForObject(url1, String.class);
    }

    //–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –∫–ª–∏–µ–Ω—Ç–∞
    public void rejectClient(Long id){
        Optional<Order> orderOptional = orderRepository.findById(id);
        Order order = orderOptional.get();

        //–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞, –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª—Å—è, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –æ–±—Ä–∞—Ç–Ω–æ –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if (order.getStatus() != OrderStatus.PENDING) {
            for (OrderItem item : order.getOrderItems()) {
                Product product = item.getProduct();
                product.setQuantity(product.getQuantity() + item.getQuantity());
                productRepository.save(product);
            }
        }

        order.setStatus(OrderStatus.CANCELLED);
        orderRepository.save(order);

        String text1 = "‚ùå –í–∞—à –∑–∞–∫–∞–∑ ‚Ññ" + id + " –û—Ç–º–µ–Ω–µ–Ω –∫–ª–∏–µ–Ω—Ç–æ–º!";
        String url = "https://api.telegram.org/bot" + TELEGRAM_BOT_TOKEN + "/sendMessage?chat_id=" + order.getSupplier().getChatId() + "&text=" + text1;
        restTemplate.getForObject(url, String.class);
        String text2 = "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–∫–∞–∑";
        String url1 = "https://api.telegram.org/bot" + TELEGRAM_BOT_TOKEN + "/sendMessage?chat_id=" + order.getClient().getChatId() + "&text=" + text2;
        restTemplate.getForObject(url1, String.class);
    }

    //–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    public void rejectOrder(Long id) {
        Optional<Order> orderOptional = orderRepository.findById(id);
        Order order = orderOptional.get();

        //–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞, –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª—Å—è, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –æ–±—Ä–∞—Ç–Ω–æ –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if (order.getStatus() != OrderStatus.PENDING) {
            for (OrderItem item : order.getOrderItems()) {
                Product product = item.getProduct();
                product.setQuantity(product.getQuantity() + item.getQuantity());
                productRepository.save(product);
            }
        }
        order.setStatus(OrderStatus.CANCELLED);
        orderRepository.save(order);

        String url = "https://api.telegram.org/bot" + TELEGRAM_BOT_TOKEN + "/sendMessage?chat_id=" + order.getSupplier().getChatId() + "&text=" + "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–∫–∞–∑!";
        restTemplate.getForObject(url, String.class);
        String text = "‚ùå –í–∞—à –∑–∞–∫–∞–∑ ‚Ññ" + id + " –û—Ç–º–µ–Ω–µ–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º!";
        String url1 = "https://api.telegram.org/bot" + TELEGRAM_BOT_TOKEN + "/sendMessage?chat_id=" + order.getClient().getChatId() + "&text=" + text;
        restTemplate.getForObject(url1, String.class);

    }

    //–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ - –≤ –ø—É—Ç–∏
    public void shippedOrder(Long id) {
        Optional<Order> orderOptional = orderRepository.findById(id);
        Order order = orderOptional.get();

        if (order.getStatus() != OrderStatus.SHIPPED) {
            order.setStatus(OrderStatus.SHIPPED);
            orderRepository.save(order);
        }

        String message = "–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω \n\n" +
                "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: \n" +
                "–î–æ—Å—Ç–∞–≤–ª–µ–Ω: /delivered_" + id + "\n" +
                "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑: /reject_" + id;

        String url = "https://api.telegram.org/bot" + TELEGRAM_BOT_TOKEN + "/sendMessage?chat_id=" + order.getSupplier().getChatId() + "&text=" + message;
        restTemplate.getForObject(url, String.class);
        String text = "\uD83D\uDE9A –í–∞—à –∑–∞–∫–∞–∑ ‚Ññ" + id + " –í –ø—É—Ç–∏";
        String url1 = "https://api.telegram.org/bot" + TELEGRAM_BOT_TOKEN + "/sendMessage?chat_id=" + order.getClient().getChatId() + "&text=" + text;
        restTemplate.getForObject(url1, String.class);
    }


    public void sendPhoto(String chatId, File photo) {
        String url = "https://api.telegram.org/bot" + TELEGRAM_BOT_TOKEN + "/sendPhoto";

        MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
        body.add("chat_id", chatId);
        body.add("photo", new FileSystemResource(photo));

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.MULTIPART_FORM_DATA);

        HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<>(body, headers);
        ResponseEntity<String> response = restTemplate.postForEntity(url, requestEntity, String.class);

        System.out.println("Telegram response: " + response.getBody());
    }

    public void deliveredOrder(Long id) {
        Optional<Order> orderOptional = orderRepository.findById(id);
        if (orderOptional.isEmpty()) return;

        Order order = orderOptional.get();
        order.setStatus(OrderStatus.DELIVERED);
        orderRepository.save(order);

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF —á–µ–∫
        try {
            File pdfFile = orderCheckService.generateOrderReceiptPdf(order);
            sendDocument(order.getSupplier().getChatId(), pdfFile, "‚úÖ –ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω. –ß–µ–∫ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ —Å QR-–∫–æ–¥–æ–º –¥–ª—è –æ–ø–ª–∞—Ç—ã.");
            pdfFile.delete(); // —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    public void completeOrder(Long id) {

    }

    public void paidOrder(){

    }


    private void sendMessage(String chatId, String text) {
        String url = "https://api.telegram.org/bot" + TELEGRAM_BOT_TOKEN + "/sendMessage?chat_id=" + chatId + "&text=" + text;
        restTemplate.getForObject(url, String.class);
    }


    public void sendDocument(String chatId, File document, String caption) {
        String url = "https://api.telegram.org/bot" + TELEGRAM_BOT_TOKEN + "/sendDocument";

        MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
        body.add("chat_id", chatId);
        body.add("caption", caption);
        body.add("document", new FileSystemResource(document));

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.MULTIPART_FORM_DATA);

        HttpEntity<MultiValueMap<String, Object>> request = new HttpEntity<>(body, headers);
        restTemplate.postForEntity(url, request, String.class);
        System.out.println("–û—Ç–≤–µ—Ç –æ—Ç Telegram: " + request.getBody());
    }
}
